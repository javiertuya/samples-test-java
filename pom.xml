<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>giis</groupId>
	<artifactId>samples-test-java</artifactId>
	<version>2.1.3-SNAPSHOT</version>
	<packaging>jar</packaging>
	<organization>
		<name>Grupo de Investigacion en Ingenieria del Software - Universidad de Oviedo</name>
		<url>http://giis.uniovi.es/</url>
	</organization>

	<name>samples-test-java</name>
	<url>https://github.com/javiertuya/samples-test-java</url>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<surefire.version>3.5.0</surefire.version>
		
		<slf4j.version>2.0.16</slf4j.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<!-- pruebas junit con parametros -->
		<dependency>
			<groupId>pl.pragmatists</groupId>
			<artifactId>JUnitParams</artifactId>
			<version>1.1.1</version>
			<scope>test</scope>
		</dependency>
		<!-- lombok, para generar automaticamente getters y setters -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.34</version>
			<scope>provided</scope>
		</dependency>
		<!-- BEGINREDUCE -->
		<!-- pruebas integracion del UI swing -->
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-swing-junit</artifactId>
			<version>3.17.1</version>
			<scope>test</scope>
		</dependency>
		<!-- pruebas BDD -->
		<dependency>
			<groupId>org.jbehave</groupId>
			<artifactId>jbehave-core</artifactId>
			<version>4.8.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.valfirst</groupId>
			<artifactId>jbehave-junit-runner</artifactId>
			<version>2.3.2</version>
			<scope>test</scope>
		</dependency>
		<!-- ENDREDUCE -->
		<dependency>
		  <groupId>io.github.javiertuya</groupId>
		  <artifactId>visual-assert</artifactId>
		  <version>2.5.0</version>
		</dependency>

		<!-- drivers de base de datos -->
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.46.1.3</version>
		</dependency>
		<!-- Logs -->
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-api</artifactId>
		    <version>${slf4j.version}</version>
		</dependency>
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-reload4j</artifactId>
		    <version>${slf4j.version}</version>
		</dependency>
		<!-- UI swing -->
		<dependency>
			<groupId>com.miglayout</groupId>
			<artifactId>miglayout</artifactId>
			<version>3.7.4</version>
		</dependency>
		<!-- utilidades varias para manejo de objetos y json -->
		<dependency>
			<groupId>commons-dbutils</groupId>
			<artifactId>commons-dbutils</artifactId>
			<version>1.8.1</version>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.4</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.18.0</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Ejecucion pruebas UT (surefire) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire.version}</version>
				<configuration>
					<testFailureIgnore>true</testFailureIgnore>
					<!-- Sets the VM argument line used when unit tests are run under JaCoCo -->
					<argLine>${surefireArgLine}</argLine>
					<redirectTestOutputToFile>true</redirectTestOutputToFile>
					<!--para evitar fallos con openjdk en linux-->
                	<useSystemClassLoader>false</useSystemClassLoader>
				</configuration>
			</plugin>
			<!-- BEGINREDUCE -->
			<!-- Definicion de localizacion pruebas IT segun convenio maven:
			     https://dzone.com/articles/integration-tests-with-maven -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.6.0</version>
				<executions>
					<!-- ignorar error si eclipse senyala uno en este punto -->
					<execution>
						<id>add-test-source</id>
						<phase>process-resources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- ejecucion de pruebas IT (failsafe) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${surefire.version}</version>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<!-- Sets the VM argument line used when integration tests are run. -->
							<!-- as of failsafe v3.2.1 the add-opens arg is needed to fix #126 -->
							<argLine>${failsafeArgLine} --add-opens java.base/java.util=ALL-UNNAMED</argLine>
							<!--para evitar fallos con openjdk en linux-->
                			<useSystemClassLoader>false</useSystemClassLoader>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Configuracion para tests con jbehave. Consideraciones: Por defecto, 
				jbehave busca las pruebas en src/main, pero como son pruebas se han puesto 
				en las carpetas src/test o src/it. Por ello se requiere indicar el scope 
				en test (para poder tener todo junto en el mismo paquete estan los escenarios 
				gherkin y las clases java auxiliares necesarias). Otro problema es que desde 
				Eclipse los test gherkin se copian correctamente a la carpeta con las clases 
				de test, pero desde maven no. Por eso se anyade un resources plugin que realiza 
				esta copia justo tras compilar las pruebas y antes de ejecutarlas (fase process-test-classes) -->
			<plugin>
				<groupId>org.jbehave</groupId>
				<artifactId>jbehave-maven-plugin</artifactId>
				<version>5.2.0</version>
				<executions>
					<!-- localizacion del mapping de historias y ejecucion en ut y en it -->
					<execution>
						<id>run-stories-ut</id>
						<phase>test</phase>
						<configuration>
							<scope>test</scope>
							<skip>${skipTests}</skip>
							<includes>
								<include>**/*Stories.java</include>
							</includes>
							<testSourceDirectory>src/test/java</testSourceDirectory>
							<ignoreFailureInStories>true</ignoreFailureInStories>
							<ignoreFailureInView>false</ignoreFailureInView>
						</configuration>
						<goals>
							<goal>run-stories-as-embeddables</goal>
						</goals>
					</execution>
					<execution>
						<id>unpack-view-resources</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>unpack-view-resources</goal>
						</goals>
					</execution>
					<execution>
						<id>run-stories-it</id>
						<phase>integration-test</phase>
						<configuration>
							<scope>test</scope>
							<includes>
								<include>**/*DisabledStories.java</include>
							</includes>
							<testSourceDirectory>src/it/java</testSourceDirectory>
							<ignoreFailureInStories>true</ignoreFailureInStories>
							<ignoreFailureInView>false</ignoreFailureInView>
						</configuration>
						<goals>
							<goal>run-stories-as-embeddables</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.1</version>
				<executions>
					<!-- copia del fuente de las historias a target para que se puedan localizar -->
					<execution>
						<id>copy-stories</id>
						<phase>process-test-classes</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/test-classes</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/test/java</directory>
									<includes>
										<include>**/*.story</include>
									</includes>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>${basedir}/src/it/java</directory>
									<includes>
										<include>**/*.story</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- ENDREDUCE -->

			<!-- jacoco plugin for code coverage, 
			     Ver: https://www.petrikainulainen.net/programming/maven/creating-code-coverage-reports-for-unit-and-integration-tests-with-the-jacoco-maven-plugin/ -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.12</version>
				<configuration>
					<excludes>
						<exclude>**/TableColumnAdjuster.*</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<!-- BEGINREDUCE -->
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>**/TableColumnAdjuster.*</exclude>
							</excludes>
							<dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
					<!-- reports consolidados ut+it -->
					<execution>
						<id>jacoco-merge</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>merge</goal>
							<goal>report</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>**/TableColumnAdjuster.*</exclude>
							</excludes>
							<destFile>${project.build.directory}/coverage-reports/jacoco.exec</destFile>
							<fileSets>
								<fileSet>
									<directory>${project.build.directory}/coverage-reports</directory>
									<includes>
										<include>*.exec</include>
									</includes>
								</fileSet>
							</fileSets>
							<dataFile>${project.build.directory}/coverage-reports/jacoco.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
					<!-- ENDREDUCE -->
				</executions>
			</plugin>

			<!-- reports test estandar de maven -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${surefire.version}</version>
				<executions>
					<execution>
						<id>ut-reports</id>
						<phase>test</phase>
						<goals>
							<goal>report-only</goal>
						</goals>
					</execution>
					<!-- BEGINREDUCE -->
					<!-- reports IT (failsafe) -->
					<execution>
						<id>it-reports</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>failsafe-report-only</goal>
						</goals>
						<configuration>
							<!-- si no se pone esto no sale el report en jenkins (si desde eclipse) -->
							<outputName>failsafe-report</outputName>
						</configuration>
					</execution>
					<!-- ENDREDUCE -->
				</executions>
			</plugin>

			<!-- Reports de test en formato html estilo junit, generados con ant -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>junit-reports-ut</id>
						<phase>test</phase>
						<configuration>
							<target unless="skipTests">
								<junitreport todir="target/surefire-reports">
									<fileset dir="target/surefire-reports">
										<include name="**/*.xml" />
									</fileset>
									<report format="frames" todir="target/site/junit-frames" />
									<report format="noframes" todir="target/site/junit-noframes" />
								</junitreport>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<!-- BEGINREDUCE -->
					<execution>
						<id>junit-reports-it</id>
						<phase>post-integration-test</phase>
						<configuration>
							<target unless="skipTests">
								<junitreport todir="target/surefire-reports">
									<fileset dir="target/surefire-reports">
										<include name="**/*.xml" />
									</fileset>
									<fileset dir="target/failsafe-reports">
										<include name="**/*.xml" />
									</fileset>
									<report format="frames" todir="target/site/junit-frames" />
									<report format="noframes" todir="target/site/junit-noframes" />
								</junitreport>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<!-- ENDREDUCE -->
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-junit</artifactId>
						<version>1.10.15</version>
					</dependency>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-trax</artifactId>
						<version>1.8.0</version>
					</dependency>
				</dependencies>
			</plugin>
			
			<!-- Generacion de documentacion javadoc (en fase install) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.10.1</version>
				<configuration>
					<overview>${basedir}/src/main/java/overview.html</overview>
					<sourcepath>${basedir}/src/main/java;${basedir}/src/test/java;${basedir}/src/it/java</sourcepath>
					<!-- Desde v3.10, destDir ha sido eliminada, la doc indica que ahora es reportOutputDirectory
					Pero esto tampoco funciona con v3.10, uso directorio por defecto: target/reports/testapidocs -->
					<quiet>true</quiet>
					<doclint>none</doclint>
				</configuration>
				<executions>
					<execution>
						<id>generate-all-javadocs</id>
						<phase>install</phase>
						<goals>
							<goal>test-javadoc</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
		</plugins>
	</build>
</project>
